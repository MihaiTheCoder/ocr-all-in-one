#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.

#Depending on the operating system of the host machines(s) that will build or run the containers, the image specified in the FROM statement may need to be changed.
#For more information, please see https://aka.ms/containercompat

FROM mcr.microsoft.com/windows:1809-amd64
WORKDIR /app
EXPOSE 80
EXPOSE 443

FROM mcr.microsoft.com/windows:1809-amd64 AS build
EXPOSE 80
EXPOSE 443
ENV chocolateyUseWindowsCompression false

RUN @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"

RUN choco install dotnetcore-sdk --confirm
WORKDIR /src
COPY ["Ocr.Wrapper.WebAPI/Ocr.Wrapper.WebAPI.csproj", "Ocr.Wrapper.WebAPI/"]
COPY ["Ocr.Wrapper/Ocr.Wrapper.csproj", "Ocr.Wrapper/"]
RUN dotnet restore "Ocr.Wrapper.WebAPI/Ocr.Wrapper.WebAPI.csproj"
COPY . .
WORKDIR "/src/Ocr.Wrapper.WebAPI"
RUN dotnet build "Ocr.Wrapper.WebAPI.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Ocr.Wrapper.WebAPI.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Ocr.Wrapper.WebAPI.dll"]